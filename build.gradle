plugins {
    id 'org.springframework.boot' version '2.4.3' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    group = 'hu.bsstudio'
    version = '1.0.0'
    sourceCompatibility = '11'

    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        set('springCloudVersion', "Hoxton.SR1")
        cucumberVersion = '6.1.1'
        springdocVersion = '1.5.6'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'io.projectreactor:reactor-core'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    compileJava.dependsOn(processResources)

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
        finalizedBy jacocoTestCoverageVerification // you can to-do this line
    }

    bootJar {
        // for Docker build
        archiveFileName = 'app.jar'
    }

    checkstyle {
        maxWarnings = 0
        maxErrors = 0
        ignoreFailures = false
    }

    def excludedPackages = [
            '**/configuration/**',
            '**/model/**',
            '**/exception/**'
    ]

    jacocoTestReport {
        dependsOn test
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludedPackages)
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludedPackages)
            }))
        }
        violationRules {
            rule {
                limit {
                    minimum = 1.00
                }
            }
        }
    }
}
