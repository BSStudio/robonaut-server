openapi: 3.0.0
info:
  title: RobonAUT Server
  version: 1.0.0
paths:
  /api/team:
    post:
      tags:
        - team
      summary: Add a new team
      description: Add a new team and broadcast it
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        201:
          description: Team was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
    get:
      tags:
        - team
      summary: Get all team
      responses:
        200:
          description: "All teams"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedTeam'
    put:
      tags:
        - team
      summary: Update team
      description: Update team and broadcast changes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        200:
          description: "Updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/skill/timer/start:
    post:
      tags:
        - skill
      summary: Start Skill Timer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/skill/timer/stop:
    post:
      tags:
        - skill
      summary: Stop Skill Timer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/skill/gate:
    post:
      tags:
        - skill
      summary: Update skill score after passing a gate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GateInfo'
      responses:
        200:
          description: "Team updated with skill race information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/skill/result:
    post:
      tags:
        - skill
      summary: Update scores after skill race
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRaceResult'
      responses:
        200:
          description: "Team updated with skill race information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/safetyCar/follow:
    post:
      tags:
        - safetycar
      summary: Send safetycar follow status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafetyCarFollowInformation'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/safetyCar/overtake:
    post:
      tags:
        - safetycar
      summary: Send safetycar overtake status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafetyCarOvertakeInformation'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/timer/start:
    post:
      tags:
        - speed
      summary: Start Speed Timer
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/timer/stop:
    post:
      tags:
        - speed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/lap:
    post:
      tags:
        - speed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedRaceScore'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/result:
    post:
      tags:
        - speed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedRaceResult'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/qualification:
    post:
      tags:
        - scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualifiedTeam'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/audience:
    post:
      tags:
        - scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudienceScoredTeam'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/endResult:
    post:
      tags:
        - scores
      summary: Add end result
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndResultedTeam'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
components:
  schemas:
    Team:
      type: object
      properties:
        teamId:
          type: integer
          required: true
        year:
          type: integer
          example: 2021
          required: true
        teamName:
          type: string
          example: "BSS"
          required: true
        teamMembers:
          type: array
          example: [ "Boldi", "Bence" ]
          required: true
          items:
            type: string
        teamType:
          type: string
          required: true
          enum:
            - JUNIOR
            - SENIOR
    DetailedTeam:
      type: object
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            skillScore:
              type: integer
              default: 0
            speedScore:
              type: integer
              default: 0
            speedBonusScore:
              type: integer
              default: 0
            numberOfOvertakes:
              type: integer
              default: 0
            safetyCarWasFollowed:
              type: boolean
              default: false
            speedTimes:
              type: array
              items:
                type: integer
              default: [ ]
            votes:
              type: integer
              default: 0
            audienceScore:
              type: integer
              default: 0
            qualificationScore:
              type: integer
              default: 0
            totalScore:
              type: integer
              default: 0
            rank:
              type: integer
              default: 0
            juniorRank:
              type: integer
              default: 0
    Timer:
      type: object
      properties:
        timerAt:
          description: Timer value in millisec
          type: integer
        timerAction:
          type: string
          example: STOP
          enum:
            - START
            - STOP
    AudienceScoredTeam:
      type: object
      properties:
        teamId:
          type: integer
        votes:
          type: integer
        audienceScore:
          type: integer
    QualifiedTeam:
      type: object
      properties:
        teamId:
          type: integer
        qualificationScore:
          type: integer
    EndResultedTeam:
      type: object
      properties:
        teamId:
          type: integer
        totalScore:
          type: integer
        rank:
          type: integer
        juniorRank:
          type: integer
    SafetyCarOvertakeInformation:
      type: object
      properties:
        teamId:
          type: integer
        numberOfOvertakes:
          type: integer
    SafetyCarFollowInformation:
      type: object
      properties:
        teamId:
          type: integer
        safetyCarFollowed:
          type: boolean
          example: true
    GateInfo:
      type: object
      properties:
        teamId:
          type: integer
        bonusTime:
          type: integer
        timeLeft:
          type: integer
        skillScore:
          type: integer
        totalSkillScore:
          type: integer
    SkillRaceResult:
      type: object
      properties:
        teamId:
          type: integer
        skillScore:
          type: integer
    SpeedRaceScore:
      type: object
      properties:
        teamId:
          type: integer
        speedTimes:
          type: array
          items:
            type: integer
    SpeedRaceResult:
      type: object
      properties:
        teamId:
          type: integer
        speedScore:
          type: integer
        speedBonusScore:
          type: integer
        speedTimes:
          type: array
          items:
            type: integer
  securitySchemes:
    RobonAuth:
      type: apiKey
      in: header
      name: RobonAuth-Api-Key
security:
  - RobonAuth: [ ]