openapi: 3.0.0
info:
  title: RobonAUT Server
  version: 1.0.0
  contact:
    name: Bence Csik
    url: https://github.com/csikb
paths:
  /api/team:
    post:
      tags:
        - team
      summary: Add a new team
      description: "Add a new team and broadcast the resulted DetailedTeam schema on the `team.teamData` queue as JSON.
                    In case of an error no data will be sent to the queue.
                    The _teamId_ field is required to be unique."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        200:
          description: "Team was created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
    get:
      tags:
        - team
      summary: Get all team
      description: "Find all persisted team and broadcast the resulted DetailedTeam schemas on the `team.teamData` queue as JSON **one by one**.
                   In case of an error no data will be sent on the queue."
      responses:
        200:
          description: "All teams"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedTeam'
    put:
      tags:
        - team
      summary: Update team
      description: "Update a team and broadcast the resulted DetailedTeam schema on the `team.teamData` queue as JSON.
                   In case of an error no data will be sent on the queue."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        200:
          description: "Updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/admin/team:
    put:
      tags:
        - team
      summary: Update all information for a team
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/DetailedTeam'
                - $ref: '#/components/schemas/DetailedTeam'
      responses:
        200:
          description: "Updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/skill/timer/start:
    post:
      tags:
        - skill
      summary: Start Skill Timer
      description: "Broadcast skill timer start state on `skill.timer` queue in JSON format.
                    If the _timerAction_ field don't match to the endpoint no action will be made"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/skill/timer/stop:
    post:
      tags:
        - skill
      summary: Stop Skill Timer
      description: "Broadcast skill timer stop state on `skill.timer` queue in JSON format.
                   If the _timerAction_ field don't match to the endpoint no action will be made"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/skill/gate:
    post:
      tags:
        - skill
      summary: Update skill score after passing a gate
      description: "Update skill score for a team after a car passed a gate successfully.
                    The provided GateInfo will be broadcast on `skill.gate` queue.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GateInfo'
      responses:
        200:
          description: "Team updated with skill race information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/skill/result:
    post:
      tags:
        - skill
      summary: Update scores after skill race
      description: "Update skill score for a team after the race was finished.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRaceResult'
      responses:
        200:
          description: "Team updated with skill race information"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/safetyCar/follow:
    post:
      tags:
        - safetycar
      summary: Send safetycar follow status
      description: "Update _safetyCarWasFollowed_ field for a team after a car successfully or unsuccessfully followed the safetyCar.
                    The provided SafetyCarFollowInformation will be broadcast on `speed.safetyCar.follow` queue.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafetyCarFollowInformation'
      responses:
        200:
          description: "The updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/safetyCar/overtake:
    post:
      tags:
        - safetycar
      summary: Send safetycar overtake status
      description: "Update _numberOfOvertakes_ field for a team how many times a team overtook the safetyCar.
                    The provided SafetyCarFollowInformation will be broadcast on `speed.safetyCar.overtake` queue.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SafetyCarOvertakeInformation'
      responses:
        200:
          description: "The updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/timer/start:
    post:
      tags:
        - speed
      summary: Start Speed Timer
      description: "Broadcast speed timer start state on `speed.timer` queue in JSON format.
                    If the _timerAction_ field don't match to the endpoint no action will be made"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/speed/timer/stop:
    post:
      tags:
        - speed
      summary: Stop Speed Timer
      description: "Broadcast speed timer stop state on `speed.timer` queue in JSON format.
                    If the _timerAction_ field don't match to the endpoint no action will be made"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timer'
      responses:
        200:
          description: "Timer state"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
  /api/speed/lap:
    post:
      tags:
        - speed
      summary: Update speed score after a lap
      description: "This action will replace all the previous _speedTimes_!
                    All previous _speedTimes_ should be sent for consistency.
                    The endpoint will update the _speedTimes_ field for a team with the latest speed race lap times.
                    The provided SpeedRaceScore will be broadcast on `speed.lap` queue.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedRaceScore'
      responses:
        200:
          description: "The updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/result/senior:
    post:
      tags:
        - speed
      summary: Update scores after speed race
      description: "This action will replace all the previous _speedTimes_!
                    All previous _speedTimes_ should be sent for consistency.
                    The endpoint will update the _speedTimes_, _speedBonusScore_ and _speedScore_ fields for a team with their speed race results.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedRaceResult'
      responses:
        200:
          description: "The updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/speed/result/junior:
    post:
      tags:
        - speed
      summary: Update scores after speed race
      description: "This action will replace all the previous _speedTimes_!
                    All previous _speedTimes_ should be sent for consistency.
                    The endpoint will update the _speedTimes_, _speedBonusScore_ and _speedScore_ fields for a team with their speed race results.
                    The updated DetailedTeam schema will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedRaceResult'
      responses:
        200:
          description: "The updated team"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/qualification:
    post:
      tags:
        - scores
      summary: Add qualification scores
      description: "Update the qualification scores for one or multiple teams.
                    The input can be a single or an array of objects.
                    The updated DetailedTeam schema(s) will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/QualifiedTeam'
                - $ref: '#/components/schemas/QualifiedTeam'
      responses:
        200:
          description: "The updated teams"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/audience:
    post:
      tags:
        - scores
      summary: Add audience scores
      description: "Update the audience scores for one or multiple teams.
                    The input can be a single or an array of objects.
                    The updated DetailedTeam schema(s) will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/AudienceScoredTeam'
                - $ref: '#/components/schemas/AudienceScoredTeam'
      responses:
        200:
          description: "The updated teams"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/endResult/senior:
    post:
      tags:
        - scores
      summary: Add end result
      description: "Update the senior end results for one or multiple teams.
                    The input can be a single or an array of objects.
                    The updated DetailedTeam schema(s) will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndResultedTeam'
      responses:
        200:
          description: "The updated teams"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
  /api/scores/endResult/junior:
    post:
      tags:
        - scores
      summary: Add end result
      description: "Update the junior end results for one or multiple teams.
                      The input can be a single or an array of objects.
                      The updated DetailedTeam schema(s) will be broadcast on the `team.teamData` queue as JSON."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndResultedTeam'
      responses:
        200:
          description: "The updated teams"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTeam'
components:
  schemas:
    Team:
      type: object
      required:
        - teamId
        - year
        - teamName
        - teamMembers
        - teamType
      properties:
        teamId:
          type: integer
        year:
          type: integer
          example: 2021
        teamName:
          type: string
          example: "BSS"
        teamMembers:
          type: array
          example: [ "Boldi", "Bence" ]
          items:
            type: string
        teamType:
          type: string
          enum:
            - JUNIOR
            - SENIOR
    DetailedTeam:
      type: object
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            skillScore:
              type: integer
              default: 0
            numberOfOvertakes:
              type: integer
              default: 0
            safetyCarWasFollowed:
              type: boolean
              default: false
            speedTimes:
              type: array
              items:
                type: integer
              default: [ ]
            votes:
              type: integer
              default: 0
            audienceScore:
              type: integer
              default: 0
            qualificationScore:
              type: integer
              default: 0
            combinedScore:
              $ref: '#/components/schemas/Score'
            juniorScore:
              $ref: '#/components/schemas/Score'
    Score:
      type: object
      required:
        - speedScore
        - bestSpeedTime
        - totalScore
      properties:
        speedScore:
          type: integer
          default: 0
        bestSpeedTime:
          type: integer
          default: 0
        totalScore:
          type: integer
          default: 0
    Timer:
      type: object
      required:
        - timerAt
        - timerAction
      properties:
        timerAt:
          type: integer
          description: Timer value in millisec
        timerAction:
          type: string
          example: STOP
          enum:
            - START
            - STOP
    AudienceScoredTeam:
      type: object
      required:
        - teamId
        - votes
        - audienceScore
      properties:
        teamId:
          type: integer
        votes:
          type: integer
        audienceScore:
          type: integer
    QualifiedTeam:
      type: object
      required:
        - teamId
        - qualificationScore
      properties:
        teamId:
          type: integer
        qualificationScore:
          type: integer
    EndResultedTeam:
      type: object
      required:
        - teamId
        - totalScore
      properties:
        teamId:
          type: integer
        totalScore:
          type: integer
    SafetyCarOvertakeInformation:
      type: object
      required:
        - teamId
        - numberOfOvertakes
      properties:
        teamId:
          type: integer
        numberOfOvertakes:
          type: integer
    SafetyCarFollowInformation:
      type: object
      required:
        - teamId
        - safetyCarFollowed
      properties:
        teamId:
          type: integer
        safetyCarFollowed:
          type: boolean
          example: true
    GateInfo:
      type: object
      required:
        - teamId
        - bonusTime
        - timeLeft
        - skillScore
        - totalSkillScore
      properties:
        teamId:
          type: integer
        bonusTime:
          type: integer
        timeLeft:
          type: integer
        skillScore:
          type: integer
        totalSkillScore:
          type: integer
    SkillRaceResult:
      type: object
      required:
        - teamId
        - skillScore
      properties:
        teamId:
          type: integer
        skillScore:
          type: integer
    SpeedRaceScore:
      type: object
      required:
        - teamId
        - speedTimes
      properties:
        teamId:
          type: integer
        speedTimes:
          type: array
          items:
            type: integer
    SpeedRaceResult:
      type: object
      required:
        - teamId
        - speedScore
        - bestSpeedTime
        - speedTimes
      properties:
        teamId:
          type: integer
        speedScore:
          type: integer
        bestSpeedTime:
          type: integer
        speedTimes:
          type: array
          items:
            type: integer
  securitySchemes:
    RobonAuth:
      type: apiKey
      in: header
      name: RobonAuth-Api-Key
security:
  - RobonAuth: [ ]
